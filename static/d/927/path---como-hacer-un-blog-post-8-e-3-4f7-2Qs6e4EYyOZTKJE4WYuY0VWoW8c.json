{"data":{"site":{"siteMetadata":{"title":"SORIAC","author":"Cristian Soria"}},"markdownRemark":{"id":"50b1f840-f687-59f0-b015-360bbfc53611","excerpt":"Gatsby es un framework basado en React para desarrollar sitios web y aplicaciones mucho mas fácil y rápidamente. Si ya sabés React y siempre quisite tener un…","html":"<p>Gatsby es un framework basado en React para desarrollar sitios web y aplicaciones mucho mas fácil y rápidamente. Si ya sabés React y siempre quisite tener un blog, podés hacerlo con Gatsby en menos de una hora. Gatsby también usa GraphQL para modelado y manejo de datos, pero para esta guía no hace falta que sepas lo que es.</p>\n<h2>Instalar las herramientas de CLI de Gatsby</h2>\n<p>Las herramientas de CLI de Gatsby nos permiten crear nuevos proyectos y facilitan el desarrollo rápido de los mismos. La instalamos como dependencia global, usando npm, como cualquier otra dependencia de JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -g gatsby-cli\n<span class=\"token comment\"># Alternativamente, con yarn</span>\n$ <span class=\"token function\">yarn</span> global <span class=\"token function\">add</span> gatsby-cli</code></pre></div>\n<p><small>Se puede usar tanto yarn como npm. A partir de acá voy a asumir que si usas Yarn, ya sabés cómo se usa, así que no voy a poner mas instrucciones.</small></p>\n<h2>Crear un proyecto vainilla</h2>\n<p>Habiendo instalado las herramientas de CLI, ya podemos crear un nuevo proyecto básico de gatsby. Para hacer esto llamamos al ejecutable de gatsby con el argumento <code class=\"language-text\">new</code> y el nombre de nuestro proyecto.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gatsby new blog</code></pre></div>\n<p>La primera vez que corramos este comando nos va a preguntar si preferimos yarn o npm, y luego descarga e instala todas las dependencias usando el administrador de paquetes que elijamos. Recordemos al terminar de instalar, de movernos al directorio de nuestro proyecto con:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> blog</code></pre></div>\n<p>Desde acá estamos listos para desarrollar. Podemos levantar nuestro servidor de desarrollo con:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gatsby develop</code></pre></div>\n<p>Este comando abre un servidor de desarrollo con nuestra página en <code class=\"language-text\">http://localhost:8000</code>, y su esquema de GraphQL en <code class=\"language-text\">http://localhost:8000/___graphql</code>.</p>\n<br/>\n<h2>Crear un proyecto con un starter</h2>\n<p>Aunque Gatsby nos facilita el uso de muchas tecnologías, no es lo mas práctico arrancar con un proyecto en blanco. Es por esto que existen proyectos públicos, precreados, llamados <strong>starters</strong>, que nos proveen un entorno un poco más desarrollado, con algunas funcionalidades ya implementadas.</p>\n<p><a href=\"https://www.gatsbyjs.org/starters/?v=2\">Hay una lista de starters</a> en la cual podemos buscar distintos proyectos </p>\n<p>Para crear un proyecto basado en un starter simplemente agregamos la URL del starter como argumento cuando lo creamos, por ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog</code></pre></div>\n<p>Con este starter tenemos preparado un blog básico con Gatsby!</p>\n<h2>Cambiar el contenido de nuestro blog</h2>\n<p>En la raíz del proyecto hay un archivo llamado <code class=\"language-text\">gatsby-config.js</code>. Este archivo contiene la configuración de nuestros plugins de Gatsby, junto con algunos atributos que se utilizan en el blog.\n<br/><br/></p>\n<p>Por ejemplo, dentro de <code class=\"language-text\">siteMetadata</code> viven varias variables de configuración de nuestro blog. Pueden cambiar estas variables y ver en tiempo real como cambia el blog. Por ejemplo, para mi blog, podría quedar algo así…</p>\n<p><em>blog-post.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    siteMetadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`JS y React en Español`</span></span><span class=\"token punctuation\">,</span>\n        author<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Cristian Soria`</span></span><span class=\"token punctuation\">,</span>\n        description<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Un espacio para aprender JS y React`</span></span><span class=\"token punctuation\">,</span>\n        siteUrl<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`soriac.github.io`</span></span><span class=\"token punctuation\">,</span>\n        social<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// el resto de los exports...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><small>Asegurate de que los 5 campos tengan algún valor! Si borrás un campo por completo, se rompen los otros 4. Si no tenés nada que poner, podés poner un string o un objeto vacío…</small></p>\n<br/>\n<p>Dentro de la carpeta <code class=\"language-text\">content</code> vive todo el contenido de nuestro blog. Por ahora nos vamos a enfocar en la carpeta <code class=\"language-text\">assets</code>, que contiene la foto del autor del blog. Simplemente cambiamos el archivo <code class=\"language-text\">profile-pic.jpg</code> por nuestra foto.</p>\n<br/>\n<p>También nos gustaría cambiar el texto del bio del autor. Dentro de <code class=\"language-text\">src/components/bio</code> se encuentra el componente que renderiza la bio del autor. Hagamos que diga algo sobre nosotros…</p>\n<p><em>src/components/bio</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...el resto del componente</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Escrito por <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> desde Buenos Aires<span class=\"token punctuation\">,</span> Argentina<span class=\"token punctuation\">.</span>\n        Trabajo en Buenos Aires como full<span class=\"token operator\">-</span>stack dev y dando talleres de React<span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><small> Este componente utiliza un <code class=\"language-text\">StaticQuery</code> de GraphQL para pedir los datos estáticos del blog, y de ahí obtiene el nombre del autor (en la variable <code class=\"language-text\">author</code>). Con GraphQL podemos elejir exactamente que datos necesitamos para nuestra página, que es súper práctico! Si querés investigar un poco más, recomiendo <a href=\"https://graphql.org/learn/\">los tutoriales oficiales de GraphQL</a>, y que <a href=\"https://www.gatsbyjs.org/tutorial/part-four/#use-a-staticquery\">intentes cambiar el componente StaticQuery por el hook useStaticQuery</a>.</small></p>\n<h2>Agregar publicaciones</h2>\n<p>Para escribir y agregar publicaciones vamos a estar usando el lenguaje de marcado <strong>Markdown</strong>. Probablemente lo usaste o lo viste en Github, ya que todos los README.md están escritos de esta manera.</p>\n<br/>\n<p>Les dejo un excelente recurso para tener a mano cuando escribimos Markdown, <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">La Markdown Cheatsheet de Adam Pritchard</a>.</p>\n<br/>\n<p>Para agregar un post simplemente creamos una carpeta dentro de <code class=\"language-text\">/content/blog</code>, y ponemos el archivo de Markdown de nuestro post dentro de la misma.</p>\n<h2>Estilo global</h2>\n<p>Existen muchas formas de aplicar estilos a un proyecto de Gatsby, pero el mas sencillo es con un .css global. Para lograr esto debemos crear una carpeta con el nombre <code class=\"language-text\">styles</code> dentro de <code class=\"language-text\">src</code>. Dentro de esta carpeta creamos el archivo <code class=\"language-text\">global.css</code>, y ponemos nuestras reglas de css.</p>\n<br/>\n<p>Para que estas reglas se apliquen a nuestra página, debemos editar el archivo <code class=\"language-text\">gatsby-browser.js</code>, agregando al final:</p>\n<p><em>gatsby-browser.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"./src/styles/global.css\"</span></code></pre></div>\n<h2>Publicar en Github Pages</h2>\n<p>Una vez que estamos contentos con nuestro blog, podemos publicarlo en Github para que todos lo puedan leer. La primera vez que hacemos esto hay algunos pasos a seguir.</p>\n<h3>Pasos previos</h3>\n<p>Primero, si estas en windows, vas a tener que configurar el ayudante de credenciales de git. Esto se hace con: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global credential.helper wincred</code></pre></div>\n<p>Luego, tenemos que crear un repositorio en github que tenga el siguiente nombre:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;username&gt;.github.io</code></pre></div>\n<p>Donde &#x3C;username> es tu usuario de github.</p>\n<br/>\n<p>Una vez que hayamos creado el repositorio podemos agregar el remote, con </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/<span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>.github.io.git</code></pre></div>\n<p>También debemos instalar <code class=\"language-text\">gh-pages</code>. Este es un paquete que se encarga de convertir y subir los archivos correctamente a nuestro repo.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> gh-pages --save-dev</code></pre></div>\n<p><small>Cuando configuré mi blog, me tiraba un error que resolví corriendo <code class=\"language-text\">npm install</code>. Creo que al agregar dependencias de desarrollo con —save-dev no hizo correctamente el install. Si no te anda el deploy, probá eso!</small></p>\n<br/>\n<p>Finalmente, vamos a modificar nuestro <code class=\"language-text\">package.json</code>, para agregar el comando que nos permite armar y subir nuestra página.\n<em>package.json</em></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby build &amp;&amp; gh-pages -d public -b master\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby build\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"develop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby develop\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write src/**/*.{js,jsx}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run develop\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby serve\"</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Publicando</h3>\n<p>Una vez que hicimos todos los pasos previos, podemos publicar nuestro blog cada vez que hacemos un cambio con el simple comando <code class=\"language-text\">deploy</code>. Esto va a publicar nuestro blog en la url que te había contado: https://&#x3C;username>.github.io</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run deploy</code></pre></div>\n<p>Felicitaciones! Ya podes compartirle tu blog a todos tus amigos y familiares, y molestarlos cada vez que hagas un post.</p>\n<p><a href=\"https://github.com/soriac/blog\">Podés encontrar el código fuente de mi blog en Github</a>, y podés usarlo para lo que quieras. Yo le hice varias modificaciones más de las que hablé en este post, y seguramente le voy a hacer muchas otras cuando tenga más tiempo.</p>","frontmatter":{"title":"Crear un blog con Gatsby y Github Pages","date":"May 25, 2019","description":"¿Siempre quisiste crear tu propio blog con React pero sin volverte loco por el hosting, ni el SEO, ni la compatibilidad? Aprendé cómo hacer un blog con Gatsby y hostearlo en github en una tarde."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/como-hacer-un-blog/post/","previous":null,"next":null}}